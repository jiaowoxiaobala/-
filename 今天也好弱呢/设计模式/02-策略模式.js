// 概念: 定义一系列算法,把它们一个个封装起来,并且使它们可以相互替换
// 组成: 一个基于策略模式的程序至少由两部分组成,第一个部分是一组策略类,策略类封装
// 了具体的算法,并负责具体的计算过程;第二个部分是环境类,屏蔽外界对策略的直接调用,
// 只对外提供一个接口,根据需要调用对应的策略

// 使用场景:
//  -有时需要多重条件判断,那么可以使用策略模式来规避多重条件判断的情况
//  -多个算法只在行为上稍有不同的场景,这时可以使用策略模式来动态选择算法

// 策略类
const strategyMap = {
  add(x, y) {
    return x + y;
  },
  sub(x, y) {
    return x - y;
  },
  mul(x, y) {
    return x * y;
  },
  div(x, y) {
    return x / y;
  }
}

// 环境类
function context(type, ...rest) {
  return strategyMap[type] && strategyMap[type](...rest);
}

// 注: 实际开发中,常用策略模式封装一系列的业务规则,只要这些业务规则指向的目标一致,并且
// 可以被替换使用,我们就可以用策略模式来封装它们