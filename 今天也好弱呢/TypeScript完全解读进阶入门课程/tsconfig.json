{
  "compilerOptions": {
    "target": "es5", // target用于指定编译之后的版本
    "module": "commonjs", // 用来指定要使用的模块标准
    "lib": [
      "es6",
      "dom"
    ] // 用于指定要包含在编译中的库文件,如果要使用一些es6的语法,需要引入ES6这个库,或者也可以写ES2015
    // allowjs:设置值为true或false,用来指定是否允许编译js文件,默认是false,即不编译js文件
    // checkjs:设置值为true或false,用来指定是否检查和报告js文件中的错误
    // jsx: 指定jsx代码用于的开发环境
    // declaration:值为true或false,用来指定是否在编译的时候生成相应的.d.ts声明文件
    // declarationMap:值为true或false,指定是否为声明文件.d.ts生成map文件
    // sourceMap:值为true或false,用来指定编译时是否生成map文件
    // outFile:指定将输出文件合并为一个文件,值为一个文件路径名
    // outDir:指定输出文件夹,值为一个文件夹路径字符串,输出的文件都将放置在这个文件夹
    // rootDir:指定编译文件的根目录,编译器会在根目录查找入口文件
    // composite:是否编译构建引用项目
    // removeComments:指定是否将编译后的文件中的注释删掉
    // noEmit: 不生成编译文件
    // imporHelpers:值为true或false,指定是否引用tslib里的辅助工具函数
    // downlevelIteration:当targe为es5或es3时,为for-of,spread和destructuring中的迭代器提供支持
    // isolatedModules:值为true或false,指定是否将每个文件作为单独的模块

    // strict:值为true或false,指定是否启动所有类型检查,如果设为true则会同时开启下面这几个严格类型检查
    // noImplicitAny:值为true或false,如果我们没有为一些值设置明确类型,编译器会默认认为这个值为any,设为true的话,
    // 如果没有设置明确的类型会报错
    // strictNullChecks:值为true或false,当设为true时,null和undefined不能赋值给非这两种类型的值(除void)
    // strictFunctionTypes:值为true或false,指定是否使用函数参数双向协变检查
    // strictBindCallApply:值为true或false,设为true后会对bind,call和apply绑定方法参数检测是严格检测的
    // strictPropertyInitialization:值为true或false,设为true后会检查类的非undefined属性是否已经在构造函数
    // 里初始化
    // noImplicitThis:当this表达式值为any类型时,生成一个错误
    // alwaysStrict: 值为true或false,指定始终以严格模式检查每个模块,并且在编译之后的js文件中加入"use strict"

    // noUnusedLocals:值为true或false,用于检查是否有定义了但是没有使用的变量
    // noUnusedParameters:值为true或false,用于检查是否有在函数中没有使用的参数
    // noImplicitReturns:值为true或false,用于检查函数是否有返回值
    // noFallthroughCasesInSwitch:值为true或false,用于检查switch中是否有case没有使用break跳出switch

    // moduleResolution:用于选择模块的解析策略
    // baseUrl:用于设置解析非相对模块名称的基本目录
    // path: {}用于设置模块名到基于baseUrl的路径映射
    // rootDirs:指定一个路径列表,在构建时编译器会将这个路径列表中的路径中的内容都放到一个文件夹中
    // typeRoots:用来指定声明文件或文件夹的路径列表,如果指定了此项,则只有在这里列出的声明文件才会被加载
    // types:用来指定需要包含的模块,只有在这里列出的模块声明文件才会被加载
    // allowSyntheticDefaultImports:值为true或false,用来指定允许从没有默认导出的模块中默认导入
    // esModuleInterop:通过导入内容创建命名空间,实现CommonJs和ES模块之间的互操作性
    // preserveSymlinks: 不把符号连接解析为其真实路径

    // sourceRoot: 用于指定调试器应该找到typescript文件而不是源文件位置
    // mapRoot:用于指定调试器找到映射文件而非生成文件的位置,指定map文件的根路径,这个选项会影响.map文件中的sources属性
    // inlineSourceMap:值为true或false,指定是否将map文件的内容和js文件编译在同一个js文件中
    // inlineSources:值为true或false,指定是否进一步将.ts文件的内容也包含到输出文件中

    // experimentalDecorators:值为true或false,指定是否启用实验性的装饰器特性
    // emitDecoratioMetadata:值为true或false,指定是否为装饰器提供元数据支持
  }
  // files:可以配置一个数组列表,里面包含指定文件的相对或绝对路径,编译器在编译的时候只会编译包含在files中列出的文件.
  // 如果不指定,则取决于有没有设置include选项,如果没有设置,则默认会编译根目录及以所有子目录中的文件,这里列出的路径
  // 必须是指定文件,而不是某个文件夹,且不能使用* ? **/等通配符

  // include:也可以指定要编译的路径列表,但是和files区别在于,这里的路径可以是文件夹,也可以是文件,可以使用相对和绝对
  // 路径,而且可以使用通配符

  // exclude:表示要排除、不编译的文件,它也可以指定一个列表,规则和include一样,可以是文件或文件夹,可以是相对或绝对
  // 路径,可以使用通配符

  // extends:可以指定一个其他的tsconfig.json文件路径,来继承这个配置文件里的配置,继承来的文件配置会覆盖当前文件定义
  // 的配置

  // compileOnSave:值是true或false,如果设为true,在我们编译了项目中文件保存的时候,编译器会根据tsconfig.json的
  // 配置重新生成文件,不过这个要编译器支持

  // references: 一个对象数组,指定要引用的项目
}
