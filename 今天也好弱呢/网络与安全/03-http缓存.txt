HTTP缓存分为两种,一种是强缓存,另一种是协商缓存。主要作用是加快资源获取速度,提升
用户体验,减少网络传输,缓解服务端压力

缓存机制匹配流程:
  -1.浏览器发送请求前,会根据请求头的expires和cache-control判断是否命中(包括是否
过期)强缓存策略,如果命中,直接从缓存获取资源,并不会发送请求,如果没命中,则进入下一步
  -2.当没有命中强缓存规则时,浏览器会发送请求,根据请求头的last-modified和etag判断
是否命中协商缓存,如果命中,直接从缓存获取资源,如果没命中,则进入下一步
  -3.如果前两步都没有命中,则直接从服务端获取资源

强缓存控制字段:
  -1.Expires
  Expires的值是一个HTTP日期,在浏览器发起请求时,会根据系统时间和Expires的值进行比较
如果系统时间超过了Expires的值,缓存失效(受限于本地时间,如果修改了本地时间,可能导致缓
存失效)
  -2.Cache-Control是HTTP/1.1中新增的属性,在请求头和响应头中都可以使用
注: Cache-Control的优先级比expires高

协商缓存控制字段:
  -1.Last-Modified
  即最后修改时间,在浏览器第一次给服务器发送请求后,服务器会在响应头中加上这个字段;浏览
器接收到后,如果再次请求,会在请求头中携带If-Modified-Since字段,值就是服务器传来的最后
修改时间。服务器拿到请求头中的If-Modified-since字段后,会和这个服务器中该资源的最后修
改时间对比,如果请求头中的这个值小于最后修改时间,说明要更新了;否则返回304,告诉浏览器直
接使用缓存
  -2.Etag
  Etag是服务器根据当前文件的内容,给文件生成的唯一标识,只要里面的内容有改动,这个值就会变
服务器通过响应头把这个值给浏览器。浏览器接收到Etag的值后,会在下次请求时,将这个值作为
If-None-Match字段的内容,并放到请求头中,发给服务器;服务器接收到If-None-Match后,会和这个
服务器上该资源的Etag进行对比,如果两者不一样,说明要更新了;否则返回304,告诉浏览器直接使用
缓存

Etag和Last-Modifed对比:
精确度上,Etag优于Last-Modified,Etag是按照内容给资源加上标识,因此能准确感知资源的变化
而Last-Modified在编辑了资源文件,但是文件内容并没有更改时,也会造成缓存失效
性能上,Last-Modified优于Etag,Last-Modified仅仅只是记录一个时间点,而Etag需要根据文件
的具体内容生成哈希值
优先级上,Etag优于Last-Modified
